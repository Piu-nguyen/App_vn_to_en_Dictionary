#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <cctype>
#include <filesystem>
using namespace std;
namespace fs = std::filesystem;

// ===============================
// Struct ch·ª©a th√¥ng tin m·ªôt t·ª´
// ===============================
struct Word {
    string english;
    string ipa;
    string vietnam;
    string example;
};

// ===============================
// Class Dictionary (cha)
// ===============================
class Dictionary {
protected:
    vector<Word> words;

public:
    void loadFromFile(const string& filename);
    void displayAll() const;
    string translate(const string& eng) const;
};

// ===============================
// Class Topic k·∫ø th·ª´a Dictionary
// ===============================
class Topic : public Dictionary {
private:
    string name;
public:
    Topic(const string& n);
    string getName() const;
    void showTopic() const;
};

// ===============================
// Tri·ªÉn khai h√†m Dictionary
// ===============================

// ƒê·ªçc d·ªØ li·ªáu t·ª´ file (ƒë·ªãnh d·∫°ng nh∆∞ file animals_topic_part1.txt)
void Dictionary::loadFromFile(const string& filename) {
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "‚ùå Kh√¥ng th·ªÉ m·ªü file: " << filename << endl;
        return;
    }

    string line;
    Word currentWord;
    while (getline(file, line)) {
        // B·ªè d√≤ng tr·ªëng ho·∫∑c d√≤ng ti√™u ƒë·ªÅ
        if (line.empty() || line[0] == '#') continue;

        // N·∫øu d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng "Example:", th√¨ l√† v√≠ d·ª• c·ªßa t·ª´ tr∆∞·ªõc
        if (line.rfind("Example:", 0) == 0) {
            currentWord.example = line.substr(8); // b·ªè "Example:"
            words.push_back(currentWord);
            continue;
        }

        // Ng∆∞·ª£c l·∫°i l√† d√≤ng ch·ª©a t·ª´ m·ªõi: d·∫°ng "dog /d…í…°/ - ch√≥"
        size_t slash1 = line.find('/');
        size_t slash2 = line.find('/', slash1 + 1);
        size_t dash = line.find('-');

        if (slash1 != string::npos && slash2 != string::npos && dash != string::npos) {
            currentWord.english = line.substr(0, slash1);
            currentWord.english.erase(currentWord.english.find_last_not_of(" \t") + 1);

            currentWord.ipa = line.substr(slash1, slash2 - slash1 + 1);

            currentWord.vietnam = line.substr(dash + 1);
            currentWord.vietnam.erase(0, currentWord.vietnam.find_first_not_of(" \t"));
            currentWord.vietnam.erase(currentWord.vietnam.find_last_not_of(" \t") + 1);
        }
    }
    file.close();

    cout << "‚úÖ ƒê√£ n·∫°p " << words.size() << " t·ª´ t·ª´ file " << filename << endl;
}

// In ra to√†n b·ªô t·ª´ trong t·ª´ ƒëi·ªÉn
void Dictionary::displayAll() const {
    for (const auto& w : words) {
        cout << w.english << " " << w.ipa << " - " << w.vietnam << endl;
        cout << "   ‚û§ Example:" << w.example << endl << endl;
    }
}

// Tra nghƒ©a ti·∫øng Anh
string Dictionary::translate(const string& eng) const {
    for (const auto& w : words)
        if (w.english == eng)
            return w.vietnam;
    return "Kh√¥ng t√¨m th·∫•y t·ª´ n√†y!";
}

// ===============================
// Tri·ªÉn khai h√†m Topic
// ===============================
Topic::Topic(const string& n) : name(n) {}

string Topic::getName() const {
    return name;
}

void Topic::showTopic() const {
    cout << "üìò Ch·ªß ƒë·ªÅ: " << name << endl;
    displayAll();
}

// ===============================
// H√†m main
// ===============================
int main() {
    cout << "=== VOCAB BY TOPIC ===\n";

    // Qu√©t th∆∞ m·ª•c hi·ªán t·∫°i l·∫•y t·∫•t c·∫£ file txt (m·ªói file = 1 topic)
    vector<string> topics;
    for (auto& p : fs::directory_iterator(".")) {
        if (p.path().extension() == ".txt")
            topics.push_back(p.path().string());
    }

    if (topics.empty()) {
        cout << "‚ùó Kh√¥ng t√¨m th·∫•y file ch·ªß ƒë·ªÅ (.txt) n√†o!\n";
        return 0;
    }

    cout << "Danh s√°ch ch·ªß ƒë·ªÅ:\n";
    for (size_t i = 0; i < topics.size(); ++i)
        cout << i + 1 << ". " << topics[i] << endl;

    cout << "Ch·ªçn s·ªë th·ª© t·ª± ch·ªß ƒë·ªÅ: ";
    int choice;
    cin >> choice;
    cin.ignore();

    if (choice < 1 || choice > (int)topics.size()) {
        cout << "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!\n";
        return 0;
    }

    string fileName = topics[choice - 1];
    string topicName = fs::path(fileName).stem().string();

    Topic selected(topicName);
    selected.loadFromFile(fileName);
    selected.showTopic();

    // Cho ph√©p tra nghƒ©a
    string w;
    cout << "\nNh·∫≠p t·ª´ ti·∫øng Anh c·∫ßn tra: ";
    getline(cin, w);
    cout << "‚Üí " << selected.translate(w) << endl;

    return 0;
}
